<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LE134加油站</title>
      <link href="/2024/11/28/LE134%E5%8A%A0%E6%B2%B9%E7%AB%99/LE134%E5%8A%A0%E6%B2%B9%E7%AB%99/"/>
      <url>/2024/11/28/LE134%E5%8A%A0%E6%B2%B9%E7%AB%99/LE134%E5%8A%A0%E6%B2%B9%E7%AB%99/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/11/28/%E5%8A%A0%E6%B2%B9%E7%AB%99/"/>
      <url>/2024/11/28/%E5%8A%A0%E6%B2%B9%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p><img src="/../images/%E9%A2%98%E7%9B%AE%E5%9B%BE/LE134.png"></p><h2 id="暴力法"><a href="#暴力法" class="headerlink" title="暴力法"></a>暴力法</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>暴力法思路简单，我们只要模拟环游路径即可</p><p>step1：我们把每个加油站都当做起点，依次从每个起点出发走一圈</p><p>step2：用rest来标记每次的剩余油量，index标记后续位置（要注意index不能越界）,当剩余油量小于0时，则无法走完一圈退出</p><p>step3:  当rest剩余油量&gt;0,同时index&#x3D;&#x3D;i（回到出发点），说明出现一条可以环游一圈的路径，起点为index</p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">canCompleteCircuit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; gas, vector&lt;<span class="type">int</span>&gt;&amp; cost)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//暴力法</span></span><br><span class="line">        <span class="comment">//把每个加油站当作起点，走一圈，找到能环游一圈的路径</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; gas.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> rest = gas[i] - cost[i]; <span class="comment">//记录剩余油量</span></span><br><span class="line">            <span class="type">int</span> index = (i + <span class="number">1</span>) % cost.<span class="built_in">size</span>();  <span class="comment">//记录后续位置</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(rest &gt; <span class="number">0</span> &amp;&amp; index != i) <span class="comment">//模拟以i为起点汽车走一圈的过程</span></span><br><span class="line">            &#123;</span><br><span class="line">                rest += gas[index] - cost[index];</span><br><span class="line">                index = (index + <span class="number">1</span>) % cost.<span class="built_in">size</span>();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果刚好能够跑一圈回到原点</span></span><br><span class="line">            <span class="keyword">if</span>(rest &gt;= <span class="number">0</span> &amp;&amp; i == index) <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="贪心法-一-比较难理解，要多回顾"><a href="#贪心法-一-比较难理解，要多回顾" class="headerlink" title="贪心法(一)(比较难理解，要多回顾)"></a>贪心法(一)(比较难理解，要多回顾)</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li><p>当累计剩余油量大于等于0则必定可以环游一圈，用totalSum来记录</p></li><li><p>环游开始位置start设置为0，依次记录当前的剩余油量</p></li><li><p>当前的剩余油量小于0时，说明[start,i]的这个区间是无法满足环游一圈的，我们更新新的出发位置，从i+1开始重新出发，同时初始化当前的剩余油量为0，再重复向后遍历</p></li><li><p>为什么从i+1开始，而中间的的位置不作考虑，同时也不但心后面出现更大负数</p><p>因为如果可以走一圈，那么必定满足正负抵消使得totalsum&gt;0</p><p>即存在一点开始，使得存在一个如下的图像，整个累计和变化过程在y轴上面</p></li></ol><p><img src="/../images/%E6%80%9D%E8%B7%AF/LE134%EF%BC%881%EF%BC%89.png"></p><h3 id="完整代码-1"><a href="#完整代码-1" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">canCompleteCircuit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; gas, vector&lt;<span class="type">int</span>&gt;&amp; cost)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> curSum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> totalSum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> start = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; gas.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            curSum += gas[i] - cost[i];  <span class="comment">//记录当前油量</span></span><br><span class="line">            totalSum += gas[i] - cost[i]; <span class="comment">//记录总油量</span></span><br><span class="line">            <span class="keyword">if</span>(curSum &lt; <span class="number">0</span>) <span class="comment">//如果当前油量小于0，不是抵消的起始点</span></span><br><span class="line">            &#123;</span><br><span class="line">                start = i + <span class="number">1</span>; <span class="comment">//更新我的起始位置</span></span><br><span class="line">                curSum = <span class="number">0</span>; <span class="comment">//重新初始化我的油量</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果总累计耗油量小于0，那么必定不可以环绕一圈</span></span><br><span class="line">        <span class="keyword">if</span>(totalSum &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> start;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/11/27/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/"/>
      <url>/2024/11/27/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="最大子数组和"><a href="#最大子数组和" class="headerlink" title="最大子数组和"></a>最大子数组和</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><img src="/2024/11/27/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/Blog\source_posts\每日一题\题目图\LE53.png" alt="logo"></p><p><img src="/2024/11/27/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/Blog\source_posts\每日一题\题目图\LE54.png"></p><h2 id="自己的解法-实际上是暴力法"><a href="#自己的解法-实际上是暴力法" class="headerlink" title="自己的解法(实际上是暴力法)"></a>自己的解法(实际上是暴力法)</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>目标：求出一个具有最大和的连续子数组，以[-2, 1,-3, 4, -1, 2, 1，-5,4]为例子</p><p>想法： 不妨从每个元素开始,有[-2, 1,-3, 4, -1, 2,1，-5,4]，[1,-3, 4, -1, 2,1，-5,4]，[-3, 4, -1, 2,1，-5,4]，[ 4, -1, 2,1，-5,4]…[4]，依次有9个子数组，求出每个子数组中的具有最大和的连续子数组。逐一比较后，得到最终的具有最大和的连续子数组。</p><p>操作步骤：</p><p>step1： int maxNum &#x3D; INT_MIN;  &#x2F;&#x2F;标记最大值 ，初始化为一个最小值</p><p>step2:</p><p>1） 第一层for循环相当于标记每个子数组的初始位置</p><p>2） <strong>将第一个子数组的首元素即为sum(也有问题)</strong>,<strong>子序列长度初始化为1（其实这个没啥用，脑子瓦特了）</strong></p><p>​       (ep:<strong>{1} 只有一个元素，MaxNum  &lt; 1 退出循环，直接返回一个最小值</strong>)</p><p>3）从第一个子数组开始，进入第二个for循环，第二个for循环依次遍历后续元素:</p><p>​         <strong>如果sum + 后面一个元素 &lt; MaxNum,, 说明必定不是最大元素，直接退出</strong>(有问题)</p><p>​        ( <strong>ep： <em>[5,4,-1,7,8]     会出现计算到5+4-1时，出现9 &lt; 8 的情况退出，最后返回[7,8]和为15</em></strong></p><p>​           <em><strong>而不是[5,4,-1,7,8]和为5+4-1+7+8&#x3D;23</strong></em>)</p><p>​         否则继续向后遍历，同时更新MaxNum</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//从一个新位置开始时，初始化最大值和子数组个数</span></span><br><span class="line">            <span class="type">int</span> sum = nums[i];  </span><br><span class="line">            <span class="type">int</span> count = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//第二层循环是依次遍历起始位置后续值</span></span><br><span class="line">            <span class="comment">//计算最大值和最大连续个数</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; nums.<span class="built_in">size</span>(); j++)</span><br><span class="line">            &#123;</span><br><span class="line">                sum += nums[j]; <span class="comment">//更新最大值</span></span><br><span class="line">                <span class="comment">//如果新的最大值大于之前的最大值</span></span><br><span class="line">                <span class="keyword">if</span>(sum &gt; maxNum)</span><br><span class="line">                &#123;</span><br><span class="line">                    maxNum = sum; <span class="comment">//保存新的最大值</span></span><br><span class="line">                    count++; <span class="comment">//个数加一</span></span><br><span class="line">                &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;  <span class="comment">//退出循环，从下一位置开始</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxSubArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//没有思路，采用暴力解法</span></span><br><span class="line">        <span class="type">int</span> maxNum = INT_MIN;  <span class="comment">//标记最大值</span></span><br><span class="line">        <span class="comment">//第一层循环用来标记最大子数组和的起始位置</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//从一个新位置开始时，初始化最大值和子数组个数</span></span><br><span class="line">            <span class="type">int</span> sum = nums[i];  </span><br><span class="line">            <span class="type">int</span> count = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//第二层循环是依次遍历起始位置后续值</span></span><br><span class="line">            <span class="comment">//计算最大值和最大连续个数</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; nums.<span class="built_in">size</span>(); j++)</span><br><span class="line">            &#123;</span><br><span class="line">                sum += nums[j]; <span class="comment">//更新最大值</span></span><br><span class="line">                <span class="comment">//如果新的最大值大于之前的最大值</span></span><br><span class="line">                <span class="keyword">if</span>(sum &gt; maxNum)</span><br><span class="line">                &#123;</span><br><span class="line">                    maxNum = sum; <span class="comment">//保存新的最大值</span></span><br><span class="line">                    count++; <span class="comment">//个数加一</span></span><br><span class="line">                &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;  <span class="comment">//退出循环，从下一位置开始</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> maxNum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[-2,1,-3,4,-1,2,1,-5,4]  答案6    正确</span><br><span class="line">[1]   答案1   错误    结果为-2147483648</span><br><span class="line">[5,4,-1,7,8]    答案23    错误  结果为15</span><br></pre></td></tr></table></figure><p>自己的思路只通过第一个测试点</p><h3 id="思路纠正后的暴力法-超时-时间复杂度高"><a href="#思路纠正后的暴力法-超时-时间复杂度高" class="headerlink" title="思路纠正后的暴力法(超时,时间复杂度高)"></a>思路纠正后的暴力法(超时,时间复杂度高)</h3><h4 id="问题所在"><a href="#问题所在" class="headerlink" title="问题所在"></a>问题所在</h4><p>2） <strong>将第一个子数组的首元素即为sum(也有问题)</strong>,<strong>子序列长度初始化为1（其实这个没啥用，脑子瓦特了）</strong></p><p>​       (ep:<strong>{1} 只有一个元素，MaxNum  &lt; 1 退出循环，直接返回一个最小值</strong>)</p><p>3）从第一个子数组开始，进入第二个for循环，第二个for循环依次遍历后续元素:</p><p>​         <strong>如果sum + 后面一个元素 &lt; MaxNum,, 说明必定不是最大元素，直接退出</strong>(有问题)</p><p>​        ( <strong>ep： <em>[5,4,-1,7,8]     会出现计算到5+4-1时，出现9 &lt; 8 的情况退出，最后返回[7,8]和为15</em></strong></p><p>​           <em><strong>而不是[5,4,-1,7,8]和为5+4-1+7+8&#x3D;23</strong></em>)</p><h4 id="纠正问题"><a href="#纠正问题" class="headerlink" title="纠正问题"></a>纠正问题</h4><p>step1: 同样定义一个result，用来跟新后续出现的最大值</p><p>step2: </p><ol><li><p>从第一个for循环开始，即循环遍历每一个分解出来的子序列，同时设置变量count记录子序列的累加和</p></li><li><p>进入第二层for循环，从子序列的首元素开始累加，得到的count和result进行比较,记录当中的最大值</p></li><li><p>第二层for循环结束，相当于求出了一个子序列的最大值</p><p> 以[5,4,-1,7,8]为例子</p><p>1] count &#x3D; 5,  5&gt;result,  result &#x3D; 5</p><p>2] count &#x3D; 5 + 4 &#x3D; 9, 9 &gt; result, result &#x3D; 9</p><p>3] count &#x3D; 9 - 1&#x3D;8 , 8 &lt; result, result &#x3D; 9</p><p>4] count &#x3D; 8 + 7 &#x3D; 15, 15 &gt; result,  result &#x3D; 15</p><p>5] count &#x3D; 15 + 8&#x3D; 23, 23 &gt;  result, result &#x3D; 23</p><p>可以得到子序列[5,4,-1,7,8]中的最大和是23</p></li></ol><h4 id="纠正后代码"><a href="#纠正后代码" class="headerlink" title="纠正后代码"></a>纠正后代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxSubArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> result = INT32_MIN;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一层for循环设置起始位置</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            count = <span class="number">0</span>;  <span class="comment">//从新位置开始时，和初始化为0</span></span><br><span class="line">            <span class="comment">//每次从起始位置i开始遍历寻找最大值  全部求和 然后不断比较新和的值，记录最大的和</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i; j &lt; nums.<span class="built_in">size</span>(); j++)</span><br><span class="line">            &#123;</span><br><span class="line">                count += nums[j];  <span class="comment">//累加求和</span></span><br><span class="line">                result = count &gt; result ? count : result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="贪心解法"><a href="#贪心解法" class="headerlink" title="贪心解法"></a>贪心解法</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>(进入第二层for循环，从子序列的首元素开始累加，得到的count和result进行比较,记录当中的最大值)</p><p>第二个for循环导致时间复杂度，可不可优化？</p><p> 以[-2,1,-3,4,-1,2,1,-5,4]为例子进行观察</p><ol><li>[-2,1]  count &#x3D; -2 +1 &lt; 0  ，从这里开始就已经小于0，猜测以-2开始的子序列最大值不如从下一个元素开始，直接跳入子序列[1,-3,4,-1,2,1,-5,4]。</li><li>[1,-3] 出现1-3&#x3D; -2 &lt; 0, 猜测以1开始的子序列最大值不如从下一个元素开始，直接跳入子序列[-3,4,-1,2,1,-5,4]。</li><li>[-3,4,-1] &#x3D; 0, 猜测以-2开始的子序列最大值不如从下一个元素开始，直接跳入子序列[4,-1,2,1,-5,4]</li><li>[4,-1,2,1,-5,4]中没有小于或等于0的和，则暴力搜索可以得到其中的最大值[4,-1,2,1]&#x3D;6，符合最大解</li><li>猜测成立，说明<strong>局部最大和子序列必须满足累加和大于0</strong>，这一天累计的结果才能推导出全局最优解。</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxSubArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> result = INT32_MIN;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            count += nums[i];</span><br><span class="line">            <span class="comment">//取区间累计的最大值</span></span><br><span class="line">            <span class="keyword">if</span>(count &gt; result)</span><br><span class="line">            &#123;</span><br><span class="line">                result = count;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(count &lt;= <span class="number">0</span>) count = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="回顾和总结"><a href="#回顾和总结" class="headerlink" title="回顾和总结"></a>回顾和总结</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/11/27/%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F/"/>
      <url>/2024/11/27/%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p><img src="/2024/11/27/%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F/Blog\source_posts\每日一题\题目图\LE55.png"></p><h2 id="贪心思路"><a href="#贪心思路" class="headerlink" title="贪心思路"></a>贪心思路</h2><h3 id="目标"><a href="#目标" class="headerlink" title="目标:"></a>目标:</h3><p>判断是否能够达到最后一个下标</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h3><ol><li><p>初步的想法是我可不可以遍历出所有的跳跃方式，然后只要出现一组到达最后一个下标的方式，就返回true，否则返回false</p><p>（会发现这个思路过于复杂，难以实现）</p></li><li><p>到达最后一个下标不妨转化为一个范围问题，只要我的全部跳跃范围覆盖了最后一个下标，那么必定可以到达最后一个下标。</p><p>进一步深入思考，如果我每次选取最大的跳跃范围，只要这些局部最大范围累覆盖最后一个下标，那么必定可以到达最后一个下标，否则最大跳跃范围都无法到达最后一个下标，那么必定失败</p></li></ol><p>​        （这就是贪心所在的地方）</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canJump</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> cover = <span class="number">0</span>;  <span class="comment">//初始覆盖范围为0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//循环退出条件</span></span><br><span class="line">        <span class="comment">//当我的跳跃位置到达最大覆盖范围时就可以退出循环</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= cover; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> temp = i + nums[i]; <span class="comment">//记录当前最大的跳跃范围</span></span><br><span class="line">            cover = cover &gt; temp ? cover : temp;  <span class="comment">//跟新最大跳跃范围</span></span><br><span class="line">            <span class="keyword">if</span>(cover &gt;= nums.<span class="built_in">size</span>() - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;  <span class="comment">//到达最后一个下标后退出</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/11/27/%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F%EF%BC%882%EF%BC%89/"/>
      <url>/2024/11/27/%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p><img src="/../../images/%E9%A2%98%E7%9B%AE%E5%9B%BE/LE45.png"></p><h2 id="自己的思路"><a href="#自己的思路" class="headerlink" title="自己的思路"></a>自己的思路</h2><h3 id="目标："><a href="#目标：" class="headerlink" title="目标："></a>目标：</h3><p>到达最后一个下标时，要使其跳跃次数最小</p><h3 id="思路：（想简单了）"><a href="#思路：（想简单了）" class="headerlink" title="思路：（想简单了）"></a>思路：（想简单了）</h3><p>第一次可以分不同的跳法</p><p>后续保证每次跳跃是最大范围</p><p>（只能解决示例）</p><h2 id="自己思路代码（超时，有漏洞，只考虑第一步）"><a href="#自己思路代码（超时，有漏洞，只考虑第一步）" class="headerlink" title="自己思路代码（超时，有漏洞，只考虑第一步）"></a>自己思路代码（超时，有漏洞，只考虑第一步）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">jump</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> result;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//起始跳跃有多种方式  但是后面每一步都要跳跃最大</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums[<span class="number">0</span>]; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> nextindex = <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> temp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(index &lt; nums.<span class="built_in">size</span>() - <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                nextindex = index + nums[index] - i;</span><br><span class="line">                temp++;</span><br><span class="line">                index = nextindex;</span><br><span class="line">            &#125;</span><br><span class="line">            result = <span class="built_in">max</span>(result, temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="贪心思想"><a href="#贪心思想" class="headerlink" title="贪心思想"></a>贪心思想</h2><h3 id="与跳跃游戏1对比"><a href="#与跳跃游戏1对比" class="headerlink" title="与跳跃游戏1对比"></a>与跳跃游戏1对比</h3><ol><li><p>回顾跳跃游戏1，可得知我们贪心的是最大跳跃范围，然后不断扩大跳跃范围</p></li><li><p>本题也是要求到达最后一个下标，但是要求步数最小</p></li></ol><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li><p>同样采用最大覆盖范围，但是为了使得步数最小，我们要记录当前跳跃最大范围和下一步的最大跳跃范围</p></li><li><p>我们首先遍历当前最大跳跃范围（在这个范围内，当前位置到达每个下标都只要一步），记录当前最大跳跃范围内的最大下一步跳跃范围（比较第一个位置到达下一个位置后，下一个位置所能产生的最大跳跃范围）</p></li><li><p>当下标位置等于当前最大跳跃范围的最大下标后，我们需要对步数进行更新，可做如下分类讨论</p></li><li><p>如果当前位置已经是最后一个下标值，直接退出循环，步数为1</p></li><li><p>如果小于最后一个下标值，我们需要和下一步最大范围进行比较，更新当前最大范围，同时增加步数</p></li><li><p>重复执行2-5，直至到达最后一个下标为止</p></li></ol><p><img src="/../../images/%E6%80%9D%E8%B7%AF/LE45.png"></p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">jump</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> curDistance = <span class="number">0</span>; <span class="comment">//当前最大跳跃范围的下标</span></span><br><span class="line">        <span class="type">int</span> nextDistance = <span class="number">0</span>;  <span class="comment">//下一步最大跳跃范围</span></span><br><span class="line">        <span class="type">int</span> step = <span class="number">0</span>; <span class="comment">//初始化步数为0</span></span><br><span class="line">        <span class="comment">//注意特殊情况</span></span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">size</span>() == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//由于题目给定可以到达最大下标，所以可以遍历所有位置</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            nextDistance = <span class="built_in">max</span>(nextDistance, i + nums[i]); <span class="comment">//更新下一步最大跳跃范围</span></span><br><span class="line">            <span class="comment">//当前位置等与当前最大跳跃范围的下标，更新当前最大跳跃范围的下标</span></span><br><span class="line">            <span class="keyword">if</span>(i == curDistance)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//当前范围最大下标没有到达最后一个下标，所以步数要加一</span></span><br><span class="line">                step++;</span><br><span class="line">                curDistance = nextDistance;  <span class="comment">//当前最大范围由下一步最大范围来更新</span></span><br><span class="line">                <span class="keyword">if</span>(curDistance &gt;= nums.<span class="built_in">size</span>() - <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> step;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/11/27/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA%EF%BC%882%EF%BC%89/"/>
      <url>/2024/11/27/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p><img src="/2024/11/27/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA%EF%BC%882%EF%BC%89/Blog\source_posts\每日一题\题目图\LE122.png"></p><h2 id="自己的解法"><a href="#自己的解法" class="headerlink" title="自己的解法"></a>自己的解法</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>目标：获取最大利润</p><p>思路：</p><p>1.为了获取最大利润，自然想到在最低价那天买入，最高价那天抛售</p><p>2.为了判断最高最低价，本人采用了前两天差价和后两天差价作记录</p><p>​     例如[7,1,5,3,6,4]</p><p>​     1-7 &#x3D; -6   5-1 &#x3D; 4  ,于是在1这天购入，5这天抛售</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; prices.<span class="built_in">size</span>() - <span class="number">2</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            preprice = prices[i] - prices[i<span class="number">-1</span>];</span><br><span class="line">            postprice = prices[i + <span class="number">1</span>] - prices[i];</span><br><span class="line">            <span class="keyword">if</span>(postprice &gt; <span class="number">0</span> &amp;&amp; preprice &lt; <span class="number">0</span>)</span><br><span class="line">               result += postprice;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 需要记录邻近两天股票的差价</span></span><br><span class="line">        <span class="comment">// 负差价时进行购买，正差价时抛出</span></span><br><span class="line">        <span class="type">int</span> result = <span class="number">0</span>; <span class="comment">//记录结果</span></span><br><span class="line">        <span class="type">int</span> preprice; <span class="comment">//前两天差价</span></span><br><span class="line">        <span class="type">int</span> postprice;  <span class="comment">//后两天差价</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; prices.<span class="built_in">size</span>() - <span class="number">2</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            preprice = prices[i] - prices[i<span class="number">-1</span>];</span><br><span class="line">            postprice = prices[i + <span class="number">1</span>] - prices[i];</span><br><span class="line">            <span class="keyword">if</span>(postprice &gt; <span class="number">0</span> &amp;&amp; preprice &lt; <span class="number">0</span>)</span><br><span class="line">               result += postprice;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="出现错误"><a href="#出现错误" class="headerlink" title="出现错误"></a>出现错误</h3><p>发现无法解决[1,2,3,4,5]这样连续上涨的问题，难以判断局部最低和最高价，以及全局最低最高价</p><h2 id="贪心解法"><a href="#贪心解法" class="headerlink" title="贪心解法"></a>贪心解法</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li><p>为了获取最大利润，自然想到在最低价那天买入，最高价那天抛售（这条思路没错）</p></li><li><p>既然全局最大利润不好求，我们就拆解为一个一个局部最大利润，那么这些局部最大利润之和就是最大全局利润</p></li><li><p><strong>如何分解</strong>（难点）</p><p>第0天买入，第3天卖出</p><p>prices[3]-prices[0] 等价于(prices[3]-prices[2])+(prices[2]-prices[1])+(prices[1]-prices[0])</p><p>可以发现这几天的利润可以拆分成明天的毛利润之和，为了使利润最大，我们只要计算正数毛利润即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从第二天开始</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; prices.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> price = prices[i] - prices[i<span class="number">-1</span>];  <span class="comment">//计算毛利润</span></span><br><span class="line">    <span class="keyword">if</span>(price &gt; <span class="number">0</span>) result += price;  <span class="comment">//大于0的毛利润就收集起来</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> temp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; prices.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            temp = prices[i] - prices[i<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">if</span>(temp &gt; <span class="number">0</span>) result += temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
